// bfs 풀이

import java.util.*;

class Solution {
    static int[] dx = {0, 0, 1, -1};
    static int[] dy = {1, -1, 0, 0};
    
    public int solution(String[] maps) {
        int n = maps.length;
        int m = maps[0].length();
        
        int startX = -1, startY = -1;
        int leverX = -1, leverY = -1;
        int exitX = -1, exitY = -1;
        
        // 해당 좌표들 저장
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                char c = maps[i].charAt(j);
                if (c == 'S') {
                    startX = i;
                    startY = j;
                } else if (c == 'L') {
                    leverX = i;
                    leverY = j;
                } else if (c == 'E') {
                    exitX = i;
                    exitY = j;
                }
            }
        }
        
        int toLever = bfs(maps, startX, startY, 'L');
        if (toLever == -1) return -1;
        
        int toExit = bfs(maps, leverX, leverY, 'E');
        if (toExit == -1) return -1;
        
        return toLever + toExit;
    }
    
    public int bfs(String[] maps, int startX, int startY, char target) {
        int n = maps.length;
        int m = maps[0].length();
        int[][] visited = new int[n][m];
        Queue<int[]> queue = new LinkedList<>();
        
        queue.offer(new int[]{startX, startY});
        visited[startX][startY] = 1;
        
        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            int x = curr[0];
            int y = curr[1];
            
            if (maps[x].charAt(y) == target) {
                return visited[x][y] - 1;
            }
            
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                
                if (nx >= 0 && ny >= 0 && nx < n && ny < m && visited[nx][ny] == 0 && maps[nx].charAt(ny) != 'X') {
                    visited[nx][ny] = visited[x][y] + 1;
                    queue.offer(new int[] {nx, ny});
                }
            }
        }
        return -1;
    }
}
